[core]
    editor     = vim
    pager      = less -FRSX
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol

[color]
	diff        = always
    status      = always
    branch      = always
    interactive = always
    ui          = always
    pager       = true

[color "branch"]
    current = yellow reverse
    local   = yellow
    remote  = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old  = red bold
    new  = green bold

[color "status"]
    added     = yellow
    changed   = green
    untracked = cyan

[help]
    autocorrect = 10

[alias]
    a      = add
    b      = branch
    c      = commit -S
    ca     = commit -a -S
    ci     = commit -S
    cp     = commit
    cl     = clone
    co     = checkout
    d      = diff
    dc     = diff --cached
    f      = fetch
    ff     = "!git f && git smf" # fetch current and all subdirectories
    p      = pull
    pp     = "!git p && git smp" # pull current and all subdirectories
    s      = status -sb
    st     = status
    aa     = add .         # add all
    au     = add -u        # add all modified files which are already tracked (see http://stackoverflow.com/questions/572549/)

## log stuff
    x           = "!git --no-pager log -10 --format=format:'%Cgreen%h%Creset %Cred%d%Creset %s %Cblue(%ar by %an)%Creset'"
    xlog        = log -10 --format=format:'%Cgreen%h%Creset %Cred%d%Creset %s %Cblue(%ar by %an)%Creset'
    xlogall     = log -10 --branches --format=format:'%Cgreen%h%Creset %Cred%d%Creset %s %Cblue(%ar by %an)%Creset'
    xlogfull    = log --format=format:'%Cgreen%h%Creset %Cred%d%Creset %s %Cblue(%ar by %an)%Creset'
    xlogfullall = log --branches --format=format:'%Cgreen%h%Creset %Cred%d%Creset %s %Cblue(%ar by %an)%Creset'
    glog        = log --oneline --decorate --stat --graph
    tree        = log --decorate --pretty=oneline --abbrev-commit --graph
    lc          = log ORIG_HEAD.. --stat --no-merges --graph
    ls          = log --show-signature

    clog        = shortlog develop --not master --no-merges
    clog-full   = log develop --not master --no-color --no-merges
    jenkins     = notes --ref jenkins show

## investigating
    # shows ignored directories
    ignored   = "!git ls-files --others -i --exclude-standard --directory"
    # show users which have commits in current branch
    userlist  = "!git log --format='%aN' | sort -u"
    # same as userlist but with commit count
    usercount = "!git log --format='%aN <%aE>'  | awk '{arr[$0]++} END{for (i in arr){print arr[i], i;}}' | sort -nr"
    # equivalent to hg out (somehow)
    # http://stackoverflow.com/questions/1450348/
    remote-branch = "!echo $(git config branch.$(git rev-parse --abbrev-ref HEAD).remote)/$(git config branch.$(git rev-parse --abbrev-ref HEAD).merge | cut -d "/" -f 3-)"
    out = "!git --no-pager log $(git remote-branch)..HEAD --format=format:'%Cgreen%h%Creset %Cred%d%Creset %s %Cblue(%ar by %an)%Creset'; echo ''"
    in = "!git --no-pager log HEAD..$(git remote-branch) --format=format:'%Cgreen%h%Creset %Cred%d%Creset %s %Cblue(%ar by %an)%Creset'"

    # should be some day similar to "hg info"
    info = remote show origin

## submodule stuff
    sm = submodule
    # submodule foreach - shortcut when running something on all submodules
    # r = recursive, q = quiet
    smfe   = submodule foreach
    smfeq  = submodule foreach --quiet
    smfer  = submodule foreach --recursive
    smferq = submodule foreach --recursive --quiet
    # submodule last message
    # --format=format:'%Cgreen%h%Creset %Cred%d%Creset %s %Cblue(%ar by
    # %an)%Creset)
    sml   = "!git --paginate smfeq  'git --no-pager log -1 --format=format:\"$path: %Cgreen%s%Creset (%Cred$(git rev-parse --abbrev-ref HEAD)%Creset/%ar)\"; echo '"
    smlr  = "!git --paginate smferq 'git --no-pager log -1 --format=format:\"$path: %Cgreen%s%Creset (%Cred$(git rev-parse --abbrev-ref HEAD)%Creset/%ar)\"; echo '"
    # submodule branches
    smb   = "!git smfeq  'echo \"$(git rev-parse --abbrev-ref HEAD) -> $path\"'"
    smbr  = "!git smferq 'echo \"$(git rev-parse --abbrev-ref HEAD) -> $path\"'"
    # submodule init update - runs initialisation and update recursive
    smiu  = "!git sm init; git sm update; git smfe 'git smiu'"
    # submodule status
    sms   = "!git smferq git status --porcelain"
    smst  = "!git smferq git status"
    # submodule update
    smp   = "!git smfer 'git --no-pager pull || echo failed' "
    smf   = "!git smfer git --no-pager fetch"

[remote "origin"]
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/notes/*:refs/notes/*

[branch "master"]
    remote = origin
    merge = refs/heads/master

[branch "develop"]
    remote = origin
    merge = refs/heads/develop

[interactive]
    singlekey = true

